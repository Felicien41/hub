apiVersion: v1
kind: Service
metadata:
  name: hub-api-svc
  labels:
    app: hub-api-svc
spec:
  ports:
    - port: 80
      targetPort: 80
      name: frontend
      protocol: TCP
    - port: 8081
      name: backend
      targetPort: 8081
      protocol: TCP
  selector:
    app: hub-api
---
{{ if .Capabilities.APIVersions.Has "networking.k8s.io/v1beta1" }}
apiVersion: networking.k8s.io/v1beta1
{{ else }}
apiVersion: networking.k8s.io/v1
{{ end }}
kind: Ingress
metadata:
  name: hub-api-ingress
  annotations:
    kubernetes.io/ingress.class: {{ .Values.ingress }}
    {{- if eq .Values.ingress "nginx" }}
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    {{- end }}
spec:
  {{- with .Values.kerberoshub.api.tls }}
  tls:
    {{- toYaml . | nindent 8 }}
  {{- end }}

  {{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1beta1" }}
  rules:
    - host: "{{ .Values.kerberoshub.api.url }}"
      http:
        paths:
          - path: /
            backend:
              serviceName: hub-api-svc
              servicePort: 8081
    {{- if .Values.kerberoshub.api.legacyUrl }}
    - host: "{{ .Values.kerberoshub.api.legacyUrl }}"
      http:
        paths:
          - path: /
            backend:
              serviceName: hub-api-svc
              servicePort: 8081
    {{- end }}
  {{- else }}
  rules:
    - host: "{{ .Values.kerberoshub.api.url }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hub-api-svc
                port:
                  number: 8081
    {{- if .Values.kerberoshub.api.legacyUrl }}
    - host: "{{ .Values.kerberoshub.api.legacyUrl }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hub-api-svc
                port:
                  number: 8081
    {{- end }}
    - host: "admin.{{ .Values.kerberoshub.api.url }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hub-api-svc
                port:
                  number: 80
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub-api
spec:
  replicas: {{ .Values.kerberoshub.api.replicas }}
  selector:
    matchLabels:
      app: hub-api
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: hub-api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: hub-api
          image: "{{ .Values.kerberoshub.api.repository }}:{{ .Values.kerberoshub.api.tag }}"
          imagePullPolicy: {{ .Values.kerberoshub.api.pullPolicy }}
          resources:
            requests:
              memory: 100Mi
              cpu: 50m
          ports:
            - containerPort: 80
              name: http
          env:
            - name: READ_ONLY
              value: "{{ .Values.readonly }}"
            - name: CLOUD_API_URL
              value: "{{ .Values.kerberoshub.api.url }}"
            - name: API_URL
              value: "{{ .Values.kerberoshub.api.schema }}://{{ .Values.kerberoshub.api.url }}"
            - name: PUBLIC_URL
              value: "{{ .Values.kerberoshub.frontend.schema }}://{{ .Values.kerberoshub.frontend.url }}"
            {{ if .Values.isPrivate }}
            - name: KERBEROS_PRIVATE_CLOUD
              value: "true"
            {{ else }}
            - name: KERBEROS_PRIVATE_CLOUD
              value: "false"
            {{ end }}
            - name: KERBEROS_LANGUAGE
              value: "{{ .Values.kerberoshub.api.language }}"
            - name: KERBEROS_FALLBACK_LANGUAGE
              value: "{{ .Values.kerberoshub.api.fallbackLanguage }}"
            - name: API_KEY
              value: "{{ .Values.kerberoshub.api.apiKey }}"

            # Kerberos Hub
            - name: LICENSE_KEY
              value: "{{ .Values.license }}"
            - name: LICENSE_API_URL
              value: "{{ .Values.licenseServer.url }}"
            - name: LICENSE_PUBLIC_API_TOKEN
              value: "{{ .Values.licenseServer.token }}"
              
            # Authorization - Authentication secret
            - name: KERBEROS_JWT_SECRET
              value: "{{ .Values.kerberoshub.api.jwtSecret }}"
              
            # SSO (OIDC) setup
            - name: SSO_ISSUER
              value: "{{ .Values.kerberoshub.api.sso.issuer }}"
            - name: SSO_CLIENTID
              value: "{{ .Values.kerberoshub.api.sso.clientId }}"
            - name: SSO_CLIENTSECRET
              value: "{{ .Values.kerberoshub.api.sso.clientSecret }}"
            - name: SSO_REDIRECTURL
              value: "{{ .Values.kerberoshub.api.schema }}://{{ .Values.kerberoshub.api.url }}{{ .Values.kerberoshub.api.sso.redirectUrl }}"

            # Kerberos pipeline
            - name: QUEUE_SYSTEM
              value: "{{ .Values.queueProvider }}"
            - name: QUEUE_NAME
              value: "{{ .Values.queueName }}"

            # Stripe for billing
            - name: STRIPE_KEY
              value: "{{ .Values.kerberoshub.api.stripe.privateKey }}"

            # AWS (Legacy, use Kerberos Vault instead)
            - name: AWS_REGION
              value: "{{ .Values.kerberoshub.api.aws.region }}"
            - name: AWS_S3_BUCKET
              value: "{{ .Values.kerberoshub.api.aws.bucket }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.kerberoshub.api.aws.accessKey }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.kerberoshub.api.aws.secretKey }}"

            # Kerberos Vault (Main instance, within Kerberos Hub you can assign additional Vaults to sites).
            - name: STORAGE_URI
              value: "{{ .Values.kerberosvault.uri }}"
            - name: STORAGE_ACCESS_KEY
              value: "{{ .Values.kerberosvault.accesskey }}"
            - name: STORAGE_SECRET_KEY
              value: "{{ .Values.kerberosvault.secretkey }}"

            # Kerberos Vault: archiving credentials. When creating a task, the underlying recording will be
            # copied to this storage provider, using the specific account credentials, for deletion/retention.
            - name: STORAGE_ARCHIVE_PROVIDER
              value: "{{ .Values.kerberosvault.archive.provider }}"
            - name: STORAGE_ARCHIVE_ACCESS_KEY
              value: "{{ .Values.kerberosvault.archive.accesskey }}"
            - name: STORAGE_ARCHIVE_SECRET_KEY
              value: "{{ .Values.kerberosvault.archive.secretkey }}"

            # Kafka settings
            - name: KAFKA_BROKER
              value: "{{ .Values.kafka.broker }}"
            - name: KAFKA_USERNAME
              value: "{{ .Values.kafka.username }}"
            - name: KAFKA_PASSWORD
              value: "{{ .Values.kafka.password }}"
            - name: KAFKA_MECHANISM
              value: "{{ .Values.kafka.mechanism }}"
            - name: KAFKA_SECURITY
              value: "{{ .Values.kafka.security }}"

            # Mongodb
            - name: MONGODB_DATABASE_CLOUD
              value: "Kerberos"
            - name: MONGODB_HOST
              value: "{{ .Values.mongodb.host }}"
            - name: MONGODB_DATABASE_CREDENTIALS
              value: "{{ .Values.mongodb.adminDatabase }}"
            - name: MONGODB_USERNAME
              value: "{{ .Values.mongodb.username }}"
            - name: MONGODB_PASSWORD
              value: "{{ .Values.mongodb.password }}"

            # Slack notifications (this will send events/logs to a specific channel).
            - name: SLACK_ENABLED
              value: "{{ .Values.kerberoshub.api.slack.enabled }}"
            - name: SLACK_HOOK
              value: "{{ .Values.kerberoshub.api.slack.hook }}"
            - name: SLACK_USERNAME
              value: "{{ .Values.kerberoshub.api.slack.username }}"

            # Elastic search - Kibana
            - name: LOGGING_ELASTICSEARCH
              value: "{{ .Values.kerberoshub.api.elasticsearch.enabled }}"
            - name: LOGGING_ELASTICSEARCH_PROTOCOL
              value: "{{ .Values.kerberoshub.api.elasticsearch.protocol }}"
            - name: LOGGING_ELASTICSEARCH_HOST
              value: "{{ .Values.kerberoshub.api.elasticsearch.host }}"
            - name: LOGGING_ELASTICSEARCH_PORT
              value: "{{ .Values.kerberoshub.api.elasticsearch.port }}"
            - name: LOGGING_ELASTICSEARCH_INDEX
              value: "{{ .Values.kerberoshub.api.elasticsearch.index }}"
            - name: LOGGING_ELASTICSEARCH_USERNAME
              value: "{{ .Values.kerberoshub.api.elasticsearch.username }}"
            - name: LOGGING_ELASTICSEARCH_PASSWORD
              value: "{{ .Values.kerberoshub.api.elasticsearch.password }}"

            # Mail settings
            - name: MAIL_PROVIDER
              value: "{{ .Values.email.provider }}"
            - name: EMAIL_FROM
              value: "{{ .Values.email.from }}"
            - name: EMAIL_FROM_DISPLAYNAME
              value: "{{ .Values.email.displayName }}"
              
            # Mail templates
            - name: WELCOME_TEMPLATE
              value: "{{ .Values.email.templates.welcome }}"
            - name: WELCOME_TITLE
              value: "{{ .Values.email.templates.welcomeTitle }}"
            - name: ACTIVATE_TEMPLATE
              value: "{{ .Values.email.templates.activate }}"
            - name: ACTIVATE_TITLE
              value: "{{ .Values.email.templates.activateTitle }}"
            - name: FORGOT_TEMPLATE
              value: "{{ .Values.email.templates.forgot }}"
            - name: FORGOT_TITLE
              value: "{{ .Values.email.templates.forgotTitle }}"

            # SMTP
            - name: SMTP_SERVER
              value: "{{ .Values.email.smtp.server }}"
            - name: SMTP_PORT
              value: "{{ .Values.email.smtp.port }}"
            - name: SMTP_USERNAME
              value: "{{ .Values.email.smtp.username }}"
            - name: SMTP_PASSWORD
              value: "{{ .Values.email.smtp.password }}"
              
            # Mailgun
            - name: MAILGUN_DOMAIN
              value: "{{ .Values.email.mailgun.domain }}"
            - name: MAILGUN_API_KEY
              value: "{{ .Values.email.mailgun.apikey }}"
